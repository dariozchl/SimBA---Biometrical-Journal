---
title: "Simulation comparison meta-models"
output: html_document
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```


```{r, warning=FALSE, message=FALSE}
library(rstan)
library(tidyverse)
library(R2jags)
library(foreach)
library(doParallel)
library(MASS) # for ginv()
library(ggh4x) # to allow for free axes with facet_grid2()
library(ggpubr)
```



## First model

Previously, we had one unneccesary level of hierarchy: the parameters of adult and pediatric dose-toxicity curves of each compound were assumed to come from a compound- and adult- (or pediatric-) specific distribution, whose means were assumed to come from a common compound-specific distribution. But since for every compound there was only one adult or pediatric population, the parameters of the compound- and population-specific distribution could not be estimated well. However, this level of hierarchy can be dropped without loss of information.

As lowest level, we assume compound-specific means, and the heterogeneity between populations is expressed by the variance $\tau^2$ (within-compound-variability). 

$$
\left(\begin{array}{cc} 
\log(\alpha_{A,j}) \\ \log(\beta_{A,j}) 
\end{array}\right), \left(\begin{array}{cc} 
\log(\alpha_{P,j}) \\ \log(\beta_{P,j}) 
\end{array}\right) \sim N\left(\left(\begin{array}{cc} 
\mu_{\alpha_j} \\ \mu_{\beta_j}
\end{array}\right), \left(\begin{array}{cc} 
\tau_{\alpha}^2 & \tau_{\alpha,\beta} \\
\tau_{\alpha,\beta} & \tau_{\beta}^2
\end{array}\right)\right)
$$  

The information about the variance is shared across all compounds. Since we only have two observations per $j$, i.e. an adult and a pediatric population, this seems to be a necessary trick.  

As a higher layer, the common compound-specific means are assumed to have one common mean and some variance (between-compound-variability): 

$$
\left(\begin{array}{cc} 
\mu_{\alpha_{j}} \\ \mu_{\beta_{j}} 
\end{array}\right) \sim N\left(\left(\begin{array}{cc} 
\mu_{\alpha} \\ \mu_{\beta}
\end{array}\right), \left(\begin{array}{cc} 
\sigma_{\alpha}^2 & \sigma_{\alpha,\beta} \\
\sigma_{\alpha,\beta} & \sigma_{\beta}^2
\end{array}\right)\right)
$$

with some priors, e.g. $\mathbf{\mu_{\alpha}} \sim N(-0.84,1.5^2)$, $\mathbf{\mu_{\beta}} \sim N(0,1.5^2)$ and $\tau_{\alpha} \sim \Gamma(1,1/10)$, $\tau_{\beta} \sim \Gamma(1,1/10)$, $\rho_{\tau} \sim \text{Unif}(-1,1)$, $\sigma_{\alpha} \sim \Gamma(1,1/10)$, $\sigma_{\beta} \sim \Gamma(1,1/10)$, $\rho_{\sigma} \sim \text{Unif}(-1,1)$.

The similarity (or heterogeneity) parameters are then estimated as standard intraclass correlation coefficients:

$$
\zeta_{\alpha} = \frac{1}{\frac{\tau^2_{\alpha}}{\sigma_{\alpha}^2}+1} = \frac{\tau^2_{\alpha}}{\tau^2_{\alpha}+\sigma^2_{\alpha}}
$$


$$
\zeta_{\beta} = \frac{1}{\frac{\tau^2_{\beta}}{\sigma_{\beta}^2}+1} = \frac{\tau^2_{\beta}}{\tau^2_{\beta}+\sigma^2_{\beta}}
$$
## Second model: ExNex-like approach

This model applies an ExNex-approach as in Neuenschwander et al. (2015). It directly estimates the similarity parameter as the mixture weights of an exchangeable and a non-exchangeable component. The two components are the following: 

*Exchangeable component*
With probabilities $\zeta_{\alpha}$ and $\zeta_{\beta}$, the parameters for adult and pediatric patients come from the same compound-specific distribution, i.e.:
$$\alpha_{P,j}, \alpha_{A,j} \sim N(\mu_{\alpha,j}, \sigma^2_{\alpha})$$ 
$$\beta_{P,j}, \beta_{A,j} \sim N(\mu_{\beta,j}, \sigma^2_{\beta})$$

*Non-exchangeable component*
With probability $1-\zeta_{\alpha}$ and $1-\zeta_{\beta}$, the parameters for adult and pediatric patients come from different compound-specific distributions, i.e.:
$$\alpha_{P,j} \sim N(\mu_{\alpha_{P,j}}, \sigma^2_{\alpha}), \\ \alpha_{A,j} \sim N(\mu_{\alpha_{A,j}}, \sigma^2_{\alpha})$$ 

$$\beta_{P,j} \sim N(\mu_{\beta_{P,j}}, \sigma^2_{\beta}), \\ \beta_{A,j} \sim N(\mu_{\beta_{A,j}}, \sigma^2_{\beta})$$

Note that the variances here are neither compound-specific nor population-specific but a common variance is assumed. This is not really a meaningful assumption, but in the non-exchangeable case a compound- and population-specific variance, i.e. $\sigma_{\alpha_{A,j}}$ and $\sigma_{\alpha_{P,j}}$ or $\sigma_{\beta_{A,j}}$ and $\sigma_{\beta_{P,j}}$, respectively, would have to be estimated from a single observation, so the model would be overparameterized. Since we are actually not interested in the variance estimation but only in the means, this trick may be considered as acceptable.

For the mixture weights a Beta prior is used: 
$$ \zeta_{\alpha} \sim \text{Beta}(0.5, 0.5) \text{ and }  \zeta_{\beta} \sim \text{Beta}(0.5, 0.5) $$
The variance parameters are assigned vague Gamma priors with shape $1$ and rate $1/10$.


# Simulations

```{r, eval=FALSE}
exnex_meta_model <- stan_model("ExNexMetaModel.stan")

metaModel.jags <- "model {

tau1 ~ dgamma(1,0.1)I(0.00001,) 
tau2 ~ dgamma(1,0.1)I(0.00001,) 

Tau[1,1]<-1/tau1
Tau[2,2]<-1/tau2
Tau[1,2]<-0
Tau[2,1]<-0

cov[1,1] ~ dgamma(1,0.1)
cov[2,2] ~ dgamma(1,0.1)
rho ~ dunif(0,1)
cov[1,2] <- sqrt(cov[1,1])*sqrt(cov[2,2])*rho
cov[2,1] <- cov[1,2]
Sigma[1:2,1:2] <- inverse(cov[1:2,1:2])


for (j in 1:nr_compounds){
  log.alphabetaa[((j-1)*2+1):((j-1)*2+2)] ~ dmnorm(mu_j[j,1:2],Tau[1:2,1:2])
  alphabetaa[(j-1)*2+1] <- exp(log.alphabetaa[(j-1)*2+1])
  alphabetaa[(j-1)*2+2] <- exp(log.alphabetaa[(j-1)*2+2])
  
  log.alphabetap[((j-1)*2+1):((j-1)*2+2)] ~ dmnorm(mu_j[j,1:2],Tau[1:2,1:2])
  alphabetap[(j-1)*2+1] <- exp(log.alphabetap[(j-1)*2+1])
  alphabetap[(j-1)*2+2] <- exp(log.alphabetap[(j-1)*2+2])
  
  mu_j[j,1:2] ~ dmnorm(mu,Sigma)
}
mu ~ dmnorm(mu_prior, priorSigma)

# sampling model
for (j in 1:nr_compounds){
  for (jj in 1:dl){
    logit(Pr.Toxa[(j-1)*dl+jj])<- log.alphabetaa[(j-1)*2+1]+alphabetaa[(j-1)*2+2]*log(dosevec[(j-1)*dl+jj]/dR)
    Ntoxa[(j-1)*dl+jj] ~ dbin(Pr.Toxa[(j-1)*dl+jj],Npata[(j-1)*dl+jj])
    logit(Pr.Toxp[(j-1)*dl+jj])<- log.alphabetap[(j-1)*2+1]+alphabetap[(j-1)*2+2]*log(dosevec[(j-1)*dl+jj]/dR)
    Ntoxp[(j-1)*dl+jj] ~ dbin(Pr.Toxp[(j-1)*dl+jj],Npatp[(j-1)*dl+jj])
  }
}

}"


```


For data generation, we make some simplifying assumptions: 

* all compounds use the same doses and sample size for both adults and children
* the sample size per trial is allocated uniformly to each dose level

However, this is not a necessary assumption. The model allows for any combination of doses and sample sizes across compounds and populations.  

```{r}
inv_logit <- function(x) exp(x)/(1+exp(x))
dose_tox_fun <- function(doses, dR, logalpha, logbeta) {inv_logit(logalpha + exp(logbeta)*log(doses/dR))}

data_generator <- function(sample_size_ped, sample_size_adults, nr_compounds, doses, dR, 
                           similarity_scenario,
                           mu_means, mu_sd, tau_priors){
  # define data generating dose-toxicity function
  alpha_pair <- c(-2.5, -0.84)
  beta_pair <- c(0, 1.5)
  data_generating_scenario <- data.frame("similarity_scenario"=rep(similarity_scenario,nr_compounds), "nr_compounds"=nr_compounds) %>% 
    rowwise() %>% mutate(logalpha_adult = sample(x=alpha_pair, size=1), logbeta_adult = sample(x=beta_pair, size=1)) %>% 
    rowwise() %>% mutate(logalpha_ped = case_when(grepl(pattern="alpha.equal", x=similarity_scenario) ~ logalpha_adult,
                                                  grepl(pattern="alpha.diff", x=similarity_scenario) ~ alpha_pair[!alpha_pair==logalpha_adult])) %>% 
    rowwise() %>% mutate(logbeta_ped = case_when(grepl(pattern="beta.equal", x=similarity_scenario) ~ logbeta_adult,
                                                 grepl(pattern="beta.diff", x=similarity_scenario) ~ beta_pair[!beta_pair==logbeta_adult]))
  
  # create number of patients and toxicities matrices
  Npata <- matrix(rep(rep(ceiling(sample_size_adults/length(doses)),length(doses)), nr_compounds), nrow=nr_compounds, byrow=TRUE)
  Npatp <- matrix(rep(rep(ceiling(sample_size_ped/length(doses)),length(doses)), nr_compounds), nrow=nr_compounds, byrow=TRUE)
  
  Ntoxp_vector <- Ntoxa_vector <- c()
  for(j in 1:nr_compounds){
    Ntoxp_vector <- c(Ntoxp_vector, rbinom(n=length(doses), size=ceiling(sample_size_ped/length(doses)), prob=dose_tox_fun(doses=doses, dR=dR, logalpha=data_generating_scenario$logalpha_ped[j], logbeta=data_generating_scenario$logbeta_ped[j])))
    Ntoxa_vector <- c(Ntoxa_vector, rbinom(n=length(doses), size=ceiling(sample_size_adults/length(doses)), prob=dose_tox_fun(doses=doses, dR=dR, logalpha=data_generating_scenario$logalpha_adult[j], logbeta=data_generating_scenario$logbeta_adult[j])))
  }
  Ntoxp <- matrix(Ntoxp_vector, nrow=nr_compounds, byrow=TRUE)
  Ntoxa <- matrix(Ntoxa_vector, nrow=nr_compounds, byrow=TRUE)
  
  # wrap up all in data that can be passed to stan
  data_stan <- list("J"=nr_compounds, "K"=length(doses), "doses"=matrix(rep(doses,nr_compounds),nrow=nr_compounds,byrow=TRUE), "dR"=rep(dR,nr_compounds), 
                    "Y_P"=Ntoxp, "Y_A"=Ntoxa, "N_P"=Npatp, "N_A"=Npata,  mu_means=mu_means, mu_sd=mu_sd, tau_priors=tau_priors)
  return(data_stan)
}

```




```{r}

simulator_fun <- function(sample_size_ped, sample_size_adults, nr_compounds, doses, dR, 
                          similarity_scenario,
                          mu_means=c(-0.84,0), mu_sd=1.5, tau_priors=c(1,1/10)){
  
  ### generate data
  data_stan <- data_generator(sample_size_ped=sample_size_ped, sample_size_adults=sample_size_adults, nr_compounds=nr_compounds, doses=doses, dR=dR, 
                              similarity_scenario=similarity_scenario,
                              mu_means=mu_means, mu_sd=mu_sd, tau_priors=tau_priors)
  
  warmup <- ifelse(nr_compounds>10, 500, 1000)
  iter <- ifelse(nr_compounds>10, 1000, 2000)
  ### Stan part
  # fit <- sampling(meta_model, data = data_stan, warmup = warmup, iter = iter, chains = 4, cores = 1, control=list(adapt_delta=0.95, max_treedepth=15), refresh=500)
  # est <- summary(fit, pars=c("tau_alpha", "tau_beta", "similarity_parameter_alpha", "similarity_parameter_beta"))$summary
  
  ### ExNex model
  fit2 <- sampling(exnex_meta_model, data = data_stan, warmup = warmup, iter = iter, chains = 4, cores = 1, control=list(adapt_delta=0.95, max_treedepth=15), refresh=500)
  estExNex <- summary(fit2, pars=c("tau_alpha", "tau_beta", "similarity_parameter_alpha", "similarity_parameter_beta"))$summary
  
  ### JAGS part
  mu_prior=mu_means #mu=matrix(rep(mu_means,nr_compounds),byrow=TRUE,ncol=2); 
  priorSigma=ginv(matrix(c(mu_sd^2,0,0,mu_sd^2),2,2))
  dl=length(doses); dR=dR; dosevec=rep(doses,nr_compounds); nr_compounds=data_stan$J 
  Ntoxa=as.vector(t(data_stan$Y_A)); Ntoxp=as.vector(t(data_stan$Y_P)); Npata=as.vector(t(data_stan$N_A)); Npatp=as.vector(t(data_stan$N_P))
  jags <- list("nr_compounds","dl","Ntoxa","Ntoxp","Npata","Npatp","mu_prior","dosevec","dR","priorSigma")
  metaModel.jags.params<-c("cov[1,1]", "cov[2,2]", "tau1", "tau2")
  metaModel.jags.fit <- jags(data = jags, inits = NULL,parameters.to.save = metaModel.jags.params,n.chains = 4, n.iter = 10000,n.burnin = 2000,model.file = textConnection(metaModel.jags))
  posts<-as.data.frame(as.matrix(as.mcmc(metaModel.jags.fit)))
  term1<-(posts$tau1)/rowSums(posts %>% dplyr::select(`cov[1,1]`))
  term2<-(posts$tau2)/rowSums(posts %>% dplyr::select(`cov[2,2]`))
  similarity_parameter_alpha <- 1/(term1+1)
  similarity_parameter_beta <- 1/(term2+1)
  
  return(rbind(#as.data.frame(est[,c("2.5%","50%","97.5%","mean")]) %>% rownames_to_column(var="param") %>% add_column("model"="stan_metaModel"), 
               as.data.frame(estExNex[,c("2.5%","50%","97.5%","mean")]) %>% rownames_to_column(var="param") %>% add_column("model"="stan_ExNexModel"), 
               as.data.frame(rbind("tau_alpha"=c(quantile(posts$tau1, probs=c(0.025,0.5,0.975)),"mean"=mean(posts$tau1)), 
                                   "tau_beta"=c(quantile(posts$tau2, probs=c(0.025,0.5,0.975)),"mean"=mean(posts$tau2)),
                                   "similarity_parameter_alpha"=c(quantile(similarity_parameter_alpha, probs=c(0.025,0.5,0.975)),"mean"=mean(similarity_parameter_alpha)), 
                                   "similarity_parameter_beta"=c(quantile(similarity_parameter_beta, probs=c(0.025,0.5,0.975)),"mean"=mean(similarity_parameter_beta)))) %>% 
                 rownames_to_column(var="param") %>% add_column("model"="jags")) %>% 
           add_column("similarity_scenario"=similarity_scenario,
                      "sample_size_adults"=sample_size_adults, "sample_size_ped"=sample_size_ped,
                      "nr_compounds"=nr_compounds))
}



```

### Similarity scenarios: 

In the simulations, four dose-toxicity scenarios are considered, consisting of two pairs of $\log(\alpha) \in \{-2.5, -0.84\}$ and $\log(\beta) \in \{0, 1.5\}$. In each compound the adult population is randomly assigned one $\alpha$ and one $\beta$ value. The pediatric population is then assigned either the same, or the respective other values, depending on the current similarity scenario. The scenarios are:

* alpha and beta equal
* alpha equal, beta different
* alpha different, beta equal
* alpha and beta different

Within each scenario, there are four possible combinations of adult and pediatric dose-toxicity curves, which are randomly assigned to each compound: 


```{r, fig.height=6, fig.width=10, echo=FALSE, warning=FALSE, message=FALSE}
visualize_dgm <- expand.grid("logalpha_adult"=c(-0.84, -2.5), "logbeta_adult"=c(0,1.5),  
            "similarity_scenario" = c("alpha.equal_beta.equal", "alpha.diff_beta.equal", "alpha.equal_beta.diff", "alpha.diff_beta.diff"),
            "dose"=0:20) %>% 
  rowwise() %>% mutate(logalpha_ped = case_when(grepl(pattern="alpha.equal", x=similarity_scenario) ~ logalpha_adult,
                                                grepl(pattern="alpha.diff", x=similarity_scenario) ~ c(-0.84, -2.5)[!c(-0.84, -2.5)==logalpha_adult])) %>% 
  rowwise() %>% mutate(logbeta_ped = case_when(grepl(pattern="beta.equal", x=similarity_scenario) ~ logbeta_adult,
                                               grepl(pattern="beta.diff", x=similarity_scenario) ~ c(0,1.5)[!c(0,1.5)==logbeta_adult])) %>% 
  rowwise() %>% mutate(tox_adult = dose_tox_fun(doses=dose, dR=10, logalpha=logalpha_adult, logbeta=logbeta_adult),
                       tox_pediatric = dose_tox_fun(doses=dose, dR=10, logalpha=logalpha_ped, logbeta=logbeta_ped)) %>% 
  unite(col="logalphabeta_adult", c(logalpha_adult, logbeta_adult), sep=", ", remove=FALSE) %>% 
  rename("alpha adults"=logalpha_adult, "beta adults"=logbeta_adult, "alpha ped"=logalpha_ped, "beta ped"=logbeta_ped)

scenario_labeller <- labeller(
  `logalphabeta_adult` = c(`-0.84, 0` = "adults:\nlog(alpha) = -0.84\nlog(beta) = 0", 
                           `-2.5, 0` = "adults:\nlog(alpha) = -2.5\nlog(beta) = 0", 
                           `-0.84, 1.5` = "adults:\nlog(alpha) = -0.84\nlog(beta) = 1.5", 
                           `-2.5, 1.5` = "adults:\nlog(alpha) = -2.5\nlog(beta) = 1.5"),
  
  `similarity_scenario` = c(`alpha.equal_beta.equal` = "Similarity scenario 1:\nequal alpha, equal beta", 
                           `alpha.diff_beta.equal` = "Similarity scenario 2:\ndifferent alpha, equal beta", 
                           `alpha.equal_beta.diff` = "Similarity scenario 3:\nequal alpha, different beta", 
                           `alpha.diff_beta.diff` = "Similarity scenario 4:\ndifferent alpha, different beta"),
) 

visualize_dgm %>% 
  pivot_longer(cols=c(tox_adult, tox_pediatric), names_to="population", names_prefix="tox_", values_to="tox_prob") %>% 
  ggplot(.) + geom_line(aes(x=dose, y=tox_prob, color=population)) + 
  facet_grid(`alpha ped`+`beta ped` ~ `alpha adults`+`beta adults`, labeller = label_both) + theme_bw() + ylab("Probability of toxicity") +
  theme(legend.position="left", panel.spacing.x = unit(1.5, "lines")) + scale_x_continuous(position = "top") + scale_y_continuous(position = "right") 

ggsave("sim_scenarios.eps", device="eps", height=6, width=11)

```


## Simulation settings

The following parameters are varied in the simulations:  

* 3 sample sizes: 
  - ped N=30, adult N=30
  - ped N=30, adult N=100 (unequal sample sizes)
  - ped N=100, adult N=100
* 3 number of compounds: 3, 7, 20
* 4 similarity scenarios (see above)

So, in total there are $3*3*4 = 36$ settings being simulated. 

We assume 5 doses which are the same for all compounds (a convenient assumption for simulation, but no requirement by any of the models). The sample size is distributed equally to each dose level (again a convenient assumption, but not a required one). Each compound is a assigned randomly one of the four pairs of dose-toxicity-curves defined above. Toxicity data for each dose are sampled from a binomial distribution with probability according to the respective dose-toxicity-curve.  

```{r, echo=FALSE}
nsim=1e2

sample_size_adults <- c(30,100)
sample_size_ped <- c(30,100)
nr_compounds <- c(3, 7, 20)
similarity_scenarios <- c("alpha.equal_beta.equal", "alpha.diff_beta.equal", "alpha.equal_beta.diff", "alpha.diff_beta.diff")

expand.grid.df <- function(...) Reduce(function(...) merge(..., by=NULL), list(...)) # expand.grid for data.frames
scenarios <- expand.grid.df(data.frame("sample_size_ped"=sample_size_ped,"sample_size_adults"=sample_size_adults), data.frame("nr_compounds"=nr_compounds), data.frame("similarity_scenarios"=similarity_scenarios)) 

scenarios <- scenarios %>% filter(sample_size_ped == sample_size_adults)

```


```{r, eval=FALSE}
results <- data.frame()

scenarios.sims <- expand.grid.df(scenarios %>% rownames_to_column("scenarioID"), data.frame("simID"=1:nsim))

for(repetition in 9:10){
  
  ncores <- detectCores()-1; 
  cl <- makeCluster(ncores); registerDoParallel(cl);
  start.time <- Sys.time()
  
  scenario.start.time <- Sys.time()
  results <- foreach(sim=1:nrow(scenarios.sims), .combine=rbind, .packages=c("tidyverse", "rstan", "R2jags", "MASS")) %dopar% {
    simulator_fun(sample_size_ped=scenarios.sims$sample_size_ped[sim], 
                  sample_size_adults=scenarios.sims$sample_size_adults[sim], 
                  nr_compounds=scenarios.sims$nr_compounds[sim], 
                  similarity_scenario=scenarios.sims$similarity_scenarios[sim], doses=c(1, 3, 10, 15, 20), dR=10)
  }
  
  
  # writeLines(paste0("scenario: ", scenario, "\nrun time for this scenario: ", 
  #                   round(as.numeric(difftime(Sys.time(), scenario.start.time, units="min")),2), " Minutes\nrun time in total: ", 
  #                   round(as.numeric(difftime(Sys.time(), start.time, units="min")),2), " Minutes"))
  
  Sys.time() - start.time
  stopCluster(cl) # end parallel computing
  
  saveRDS(results, file=paste("meta_analysis_results", repetition*100, ".Rds", sep = ""))
}

```



```{r, echo=FALSE}
results <- bind_rows(
  readRDS("meta_analysis_results100.Rds") %>% filter(model != "stan_metaModel"),
  readRDS("meta_analysis_results200.Rds"),
  readRDS("meta_analysis_results300.Rds"),
  readRDS("meta_analysis_results400.Rds"),
  readRDS("meta_analysis_results500.Rds"),
  readRDS("meta_analysis_results600.Rds"),
  readRDS("meta_analysis_results700.Rds"),
  readRDS("meta_analysis_results800.Rds"),
  readRDS("meta_analysis_results900.Rds"),
  readRDS("meta_analysis_results1000.Rds")
)


results <- results %>% mutate(sample_size_adults_ped=interaction(sample_size_adults, sample_size_ped))

```


```{r, echo=FALSE, include=FALSE}
scenario_labeller <- labeller(
  `sample_size_adults_ped` = c(`30.30` = "Sample Size:\nped:30, adult:30", `100.100` = "Sample Size:\nped:100, adult:100"),
  `nr_compounds` = c(`3` = "Compounds: 3", `7` = "Compounds: 7", `20` = "Compounds: 20"), #, .default = label_both
  `similarity_scenario` = c(`alpha.equal_beta.equal` = "alpha equal, beta equal",
                            `alpha.diff_beta.equal` = "alpha different, beta equal",
                            `alpha.equal_beta.diff` = "alpha equal, beta different",
                            `alpha.diff_beta.diff` = "alpha different, beta different")
) 
scenario_labeller2 <- labeller(
  `nr_compounds` = c(`3` = "Compounds: 3", `7` = "Compounds: 7", `20` = "Compounds: 20")
) 
```


### Simulation results: posterior means of heterogeneity parameters for all simulation scenarios



```{r, include=FALSE, fig.height=10, fig.width=15}
results %>% filter(grepl(pattern="tau", x=param)) %>% ggplot(.) + geom_boxplot(aes(x=param, y=mean, color=model)) + facet_grid(sample_size_adults_ped+nr_compounds~similarity_scenario, labeller=scenario_labeller) + 
  coord_cartesian(ylim=c(0,5))
```


```{r, echo=FALSE, fig.height=12, fig.width=15}
results %>% mutate(param = case_when(param == "zeta_alpha" ~ "similarity_parameter_alpha", param == "zeta_beta" ~ "similarity_parameter_beta", TRUE ~ param)) %>% 
  filter(grepl(pattern="similar", x=param)) %>% ggplot(.) + geom_boxplot(aes(x=param, y=mean, color=model)) + facet_grid(sample_size_adults_ped+nr_compounds~similarity_scenario, labeller=scenario_labeller) + 
  coord_cartesian(ylim=c(0,1)) + theme_bw()
```



```{r, include=FALSE, fig.height=10, fig.width=10}
# simulation results visualization for talks
results %>% mutate(param = case_when(param == "similarity_parameter_alpha"  ~  "zeta_alpha", param == "similarity_parameter_beta"  ~ "zeta_beta", TRUE ~ param)) %>% 
  filter(grepl(pattern="zeta", x=param)) %>% 
  filter(sample_size_adults_ped %in% c("30.30", "100.100") & nr_compounds %in% c(3,7,20) & model %in% c("jags", "stan_ExNexModel")) %>% 
  mutate(model = ifelse(model=="jags","hierarchical","ExNex")) %>% 
  ggplot(.) + geom_boxplot(aes(x=param, y=mean, color=model)) + facet_grid(sample_size_adults_ped+nr_compounds~similarity_scenario, labeller=scenario_labeller) + xlab("")  +
  scale_y_continuous(expand = c(0, 0)) + coord_cartesian(ylim=c(0,1)) + theme_bw() + theme(legend.position="bottom", panel.spacing.y = unit(1, "lines")) + ylab("Posterior mean")
ggsave("sim_results_boxplots_presentation.eps", device="eps", width=10, height=10)
```




### Width of 95% credible intervals


```{r,fig.width=20,fig.height=8, echo=FALSE}
plot_CrI <- function(compounds, sample_size, scenario) {
  results %>% 
    mutate(param = case_when(param == "zeta_alpha" ~ "similarity_parameter_alpha", param == "zeta_beta" ~ "similarity_parameter_beta", TRUE ~ param)) %>%
    mutate(param = gsub(pattern="similarity_parameter", replacement="zeta", x=param)) %>% 
    group_by(similarity_scenario, sample_size_adults_ped) %>% mutate(sim_id = 1:n()) %>% 
    filter(sample_size_adults_ped==sample_size_adults_ped & nr_compounds==compounds & param %in% c("zeta_alpha", "zeta_beta") & similarity_scenario==scenario) %>% 
    ggplot(.,aes(x=mean, y=sim_id, color=model)) + #geom_point(color="black",size=0.1) +
    geom_linerange(aes(xmin=`2.5%`, xmax=`97.5%`),alpha=1) + scale_x_continuous(limits=c(0,1)) +
    ggh4x::facet_grid2(model ~ param, scales="free", independent = "x") +
    ggtitle(paste0("Ped N=", unlist(strsplit(x=sample_size, "\\."))[2], ", adult N=", unlist(strsplit(x=sample_size, "\\."))[1], ", ", compounds, " compounds, ", scenario)) + 
    theme_bw() + theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), plot.title = element_text(size=10))
}

ggarrange(plot_CrI(compounds=3, sample_size="30.30", scenario="alpha.equal_beta.equal"),
          plot_CrI(compounds=3, sample_size="30.30", scenario="alpha.diff_beta.equal"),
          plot_CrI(compounds=3, sample_size="30.30", scenario="alpha.equal_beta.diff"),
          plot_CrI(compounds=3, sample_size="30.30", scenario="alpha.diff_beta.diff"),
          plot_CrI(compounds=20, sample_size="30.30", scenario="alpha.equal_beta.equal"),
          plot_CrI(compounds=20, sample_size="30.30", scenario="alpha.diff_beta.equal"),
          plot_CrI(compounds=20, sample_size="30.30", scenario="alpha.equal_beta.diff"),
          plot_CrI(compounds=20, sample_size="30.30", scenario="alpha.diff_beta.diff"),
          plot_CrI(compounds=20, sample_size="100.100", scenario="alpha.equal_beta.equal"),
          plot_CrI(compounds=20, sample_size="100.100", scenario="alpha.diff_beta.equal"),
          plot_CrI(compounds=20, sample_size="100.100", scenario="alpha.equal_beta.diff"),
          plot_CrI(compounds=20, sample_size="100.100", scenario="alpha.diff_beta.diff"), ncol=4, common.legend = TRUE, legend="bottom")


```

```{r, include=FALSE, fig.height=4, fig.width=8}
# simulation results visualization for talks
plot_CrI <- function(compounds, sample_size, scenario) {
  results %>% 
    mutate(param = case_when(param == "zeta_alpha" ~ "similarity_parameter_alpha", param == "zeta_beta" ~ "similarity_parameter_beta", TRUE ~ param)) %>%
    mutate(param = gsub(pattern="similarity_parameter", replacement="zeta", x=param)) %>% 
    group_by(similarity_scenario, sample_size_adults_ped) %>% mutate(sim_id = 1:n()) %>% 
    filter(sample_size_adults_ped==sample_size_adults_ped & nr_compounds==compounds & param %in% c("zeta_alpha", "zeta_beta") & similarity_scenario==scenario) %>% 
  filter(model %in% c("jags", "stan_ExNexModel")) %>% 
  mutate(model = ifelse(model=="jags","hierarchical","ExNex")) %>% 
    ggplot(.,aes(x=mean, y=sim_id, color=model)) + #geom_point(color="black",size=0.1) +
    geom_linerange(aes(xmin=`2.5%`, xmax=`97.5%`),alpha=1) + scale_x_continuous(limits=c(0,1)) +
    ggh4x::facet_grid2(model ~ param, scales="free", independent = "x") +
    ggtitle(paste0("Ped N=", unlist(strsplit(x=sample_size, "\\."))[2], ", adult N=", unlist(strsplit(x=sample_size, "\\."))[1], ", ", compounds, " compounds, ", scenario)) + 
    theme_bw() + 
    theme(axis.title.y=element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), 
          plot.title = element_text(size=10), legend.position="none")
}


ggarrange(plot_CrI(compounds=3, sample_size="30.30", scenario="alpha.equal_beta.equal"),
          plot_CrI(compounds=3, sample_size="30.30", scenario="alpha.diff_beta.diff"), ncol=2)
ggsave("sim_results_CIs_3comp_presentation.eps", device="eps", width=10, height=3)

ggarrange(plot_CrI(compounds=20, sample_size="30.30", scenario="alpha.equal_beta.equal"),
          plot_CrI(compounds=20, sample_size="30.30", scenario="alpha.diff_beta.diff"), ncol=2)
ggsave("sim_results_CIs_20comp_presentation.eps", device="eps", width=10, height=3)
```







# New pediatric trial


## compile Stan model
```{r}
BLRM_fixed <- stan_model("BLRM_fixed.stan")
BLRM_mixture_fixed <- stan_model("BLRM_mixture.stan")
BLRM_mixture_estimate <- stan_model("BLRM_mixture_estimated.stan")
BLRM_inflated_fixed <- stan_model("BLRM_inflated_var.stan")
BLRM_inflated_estimated <- stan_model("BLRM_inflated_var_estimated.stan")
```


## generate adult data from which to be borrowed

```{r}
nsim=1e3
sample_size_adults=40
doses=c(1, 3, 10, 15, 20)
dR=10

dose_tox_scenarios <- expand.grid("alpha_adults"=c(-2.5, -0.84), "beta_adults"=c(0, 1.5), "alpha_ped"=c(-2.5, -0.84), "beta_ped"=c(0, 1.5)) %>% 
  rowwise() %>% 
  mutate(adult_tox=list(dose_tox_fun(doses=doses, dR=dR, logalpha=alpha_adults, logbeta=beta_adults)),
         ped_tox=list(dose_tox_fun(doses=doses, dR=dR, logalpha=alpha_ped, logbeta=beta_ped)),
         dose = list(1:5)) %>% 
  unnest(cols = c(adult_tox, ped_tox, dose)) %>% 
  rowwise() %>% 
  mutate(NpatA=ceiling(sample_size_adults/length(doses)), 
         NtoxA=list(rbinom(n=nsim, size=NpatA, prob=adult_tox)), adult_simID=list(1:nsim)) %>% 
  unnest(cols = c(NtoxA, adult_simID)) %>% 
  pivot_wider(names_from=dose, values_from=c(adult_tox, ped_tox, NpatA, NtoxA), names_prefix="dose") %>% 
  mutate(similarity_scenario = case_when(alpha_adults==alpha_ped & beta_adults==beta_ped ~ "alpha.equal_beta.equal",
                                         alpha_adults!=alpha_ped & beta_adults==beta_ped ~ "alpha.diff_beta.equal",
                                         alpha_adults==alpha_ped & beta_adults!=beta_ped ~ "alpha.equal_beta.diff",
                                         alpha_adults!=alpha_ped & beta_adults!=beta_ped ~ "alpha.diff_beta.diff"))

```


## transform adult data into a prior

```{r}
# fit BLRM to the adult data

mu <- c(-0.84, 1)
Sigma <- matrix(c(2^2, 0, 0, 1.5^2), ncol=2)

informative_mu <- informative_Sigma <- list()

ncores <- detectCores()-1; 
cl <- makeCluster(ncores); registerDoParallel(cl);

start.time <- Sys.time()

prior_from_adults <- foreach(i=1:nrow(dose_tox_scenarios), .combine=rbind, .packages=c("tidyverse", "rstan", "R2jags", "MASS")) %dopar% {

  current_scenario = dose_tox_scenarios[i,]
  data <- list("doses"=doses, "dR"=dR, "K"=length(doses), 
               "tox"=current_scenario %>% dplyr::select(starts_with("NtoxA")) %>% unlist() %>% as.numeric(), 
               "N"=current_scenario %>% dplyr::select(starts_with("NpatA")) %>% unlist() %>% as.numeric(), 
               "mu" = mu, "Sigma" = Sigma)
  
  fit <- sampling(BLRM_fixed, data = data, warmup = 2000, iter = 5000, chains = 4, cores = 1, thin = 1, refresh = 0)
  
  # Derive informative priors. 
  posterior <- as_tibble(cbind(rstan::extract(fit)$logalphabeta[,1], rstan::extract(fit)$logalphabeta[,2]))
  
  # derive covariance matrix for informative prior
  return(tibble("informative_mu" = list(c(mean(posterior$V1), mean(posterior$V2))),
              "informative_Sigma" = list(posterior %>% cov())))
}

stopCluster(cl) # end parallel computing

Sys.time() - start.time

informative_mu <- prior_from_adults$informative_mu
informative_Sigma <- prior_from_adults$informative_Sigma

```


## run the pediatric trial with different model specifications across several scenarios

```{r}
source("sim_phaseI.R")

# similarity parameter for inflated models need to be transformed because sigma^2/x is quite informative if x=0.5
# sigma^2/x^2 did not do the job because variance decreases too fast with x
# sigma^2*100*0.01^x, i.e., transforming the similarity parameter to 1/(100*0.01^x) seems to perform better, see e.g.:
# curve(0.3*100*0.01^x, from=0.1, to=1, xlab="x", ylab="y")
# if x=0, then the factor becomes 100
# if x=1, then the factor becomes 1
# and between 0 and 1, most values of x correspond to large factors. See the mapping: curve(1/(100*0.01^x), from=0.1, to=1, xlab="x", ylab="y")


sim_results <- list()

for(i in 1:10){
  ncores <- detectCores()-1; 
  cl <- makeCluster(ncores); registerDoParallel(cl);
  
  start.time <- Sys.time()
  
  sim_results[[i]] <- foreach(sim = ((i-1)*nrow(dose_tox_scenarios)/10+1): (i*nrow(dose_tox_scenarios)/10), .combine=rbind, .packages=c("tidyverse", "rstan", "R2jags", "MASS")) %dopar% {
    
    # fixed BLRM with weakly informative priors 
    fixed_weak <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
                             estimate_similarity_parameter=FALSE,
                             sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
                             stanmodel=BLRM_fixed,  
                             stan_data = list("dR"=dR, "K"=length(doses),
                                              "mu" = informative_mu[[sim]], "Sigma" = Sigma),
                             iterations=3000, return_posterior=FALSE)
    
    # fixed BLRM with strongly informative priors 
    fixed_strong <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
                               estimate_similarity_parameter=FALSE,
                               sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
                               stanmodel=BLRM_fixed,  
                               stan_data = list("dR"=dR, "K"=length(doses),
                                                "mu" = informative_mu[[sim]], "Sigma" = informative_Sigma[[sim]]),
                               iterations=3000, return_posterior=FALSE)
    
    # mixture BLRM with fixed weights of 0.5
    mixture_0.5 <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
                              estimate_similarity_parameter=FALSE,
                              sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
                              stanmodel=BLRM_mixture_fixed,  
                              stan_data = list("dR"=dR, "K"=length(doses),
                                               "mu_1" = informative_mu[[sim]], "mu_2" = informative_mu[[sim]], 
                                               "Sigma_1" = informative_Sigma[[sim]], "Sigma_2" = Sigma, similarity_parameter_alpha=0.5, similarity_parameter_beta=0.5),
                              iterations=3000, return_posterior=FALSE)
    
    # inflated variance BLRM with fixed weight of 0.5
    inflated_0.5 <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(),
                               estimate_similarity_parameter=FALSE,
                               sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
                               stanmodel=BLRM_inflated_fixed,
                               stan_data = list("dR"=dR, "K"=length(doses),
                                                "mu" = informative_mu[[sim]],
                                                "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])),
                                                "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])),
                                                "similarity_parameter_alpha"=0.5, "similarity_parameter_beta"=0.5),
                               iterations=3000, return_posterior=FALSE)
    
    
    ############################################################################################################  
    # sample size 100, 20 compounds
    ############################################################################################################
    results_subset <- results %>% 
      filter(grepl(pattern="similarity", x=param) & 
               model=="jags" & similarity_scenario==dose_tox_scenarios$similarity_scenario[sim] & 
               sample_size_adults==100 & nr_compounds==20) %>% 
      pivot_wider(names_from=param, values_from=c(`2.5%`, `50%`, `97.5%`, mean)) %>% unnest() 
    
    # mixture BLRM with weights from MetaModel
    mixture_metaModel_N100_20comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_mixture_fixed,  
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu_1" = informative_mu[[sim]], "mu_2" = informative_mu[[sim]], 
                       "Sigma_1" = informative_Sigma[[sim]], "Sigma_2" = Sigma, 
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    # inflated BLRM with weights from MetaModel
    inflated_metaModel_N100_20comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(),
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_inflated_fixed,
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu" = informative_mu[[sim]],
                       "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])),
                       "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])),
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    results_subset <- results %>% 
      filter(grepl(pattern="similarity", x=param) & 
               model=="stan_ExNexModel" & similarity_scenario==dose_tox_scenarios$similarity_scenario[sim] & 
               sample_size_adults==100 & nr_compounds==20) %>% 
      pivot_wider(names_from=param, values_from=c(`2.5%`, `50%`, `97.5%`, mean)) %>% unnest() 
    
    # mixture BLRM with weights from ExNexModel
    mixture_ExNexModel_N100_20comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_mixture_fixed,  
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu_1" = informative_mu[[sim]], "mu_2" = informative_mu[[sim]], 
                       "Sigma_1" = informative_Sigma[[sim]], "Sigma_2" = Sigma, 
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    # inflated BLRM with weights from ExNexModel
    inflated_ExNexModel_N100_20comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(),
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_inflated_fixed,
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu" = informative_mu[[sim]],
                       "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])),
                       "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])),
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    ############################################################################################################  
    # sample size 30, 7 compounds
    ############################################################################################################
    
    results_subset <- results %>% 
      filter(grepl(pattern="similarity", x=param) & 
               model=="jags" & similarity_scenario==dose_tox_scenarios$similarity_scenario[sim] & 
               sample_size_adults==30 & nr_compounds==7) %>% 
      pivot_wider(names_from=param, values_from=c(`2.5%`, `50%`, `97.5%`, mean)) %>% unnest() 
    
    # mixture BLRM with weights from MetaModel
    mixture_metaModel_N30_7comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_mixture_fixed,  
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu_1" = informative_mu[[sim]], "mu_2" = informative_mu[[sim]], 
                       "Sigma_1" = informative_Sigma[[sim]], "Sigma_2" = Sigma, 
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    # inflated BLRM with weights from MetaModel
    inflated_metaModel_N30_7comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(),
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_inflated_fixed,
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu" = informative_mu[[sim]],
                       "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])),
                       "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])),
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    results_subset <- results %>% 
      filter(grepl(pattern="similarity", x=param) & 
               model=="stan_ExNexModel" & similarity_scenario==dose_tox_scenarios$similarity_scenario[sim] & 
               sample_size_adults==30 & nr_compounds==7) %>% 
      pivot_wider(names_from=param, values_from=c(`2.5%`, `50%`, `97.5%`, mean)) %>% unnest() 
    
    # mixture BLRM with weights from ExNexModel
    mixture_ExNexModel_N30_7comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_mixture_fixed,  
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu_1" = informative_mu[[sim]], "mu_2" = informative_mu[[sim]], 
                       "Sigma_1" = informative_Sigma[[sim]], "Sigma_2" = Sigma, 
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    # inflated BLRM with weights from ExNexModel
    inflated_ExNexModel_N30_7comp <- sim.phaseI(
      doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(),
      estimate_similarity_parameter=FALSE,
      sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
      stanmodel=BLRM_inflated_fixed,
      stan_data = list("dR"=dR, "K"=length(doses),
                       "mu" = informative_mu[[sim]],
                       "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])),
                       "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])),
                       similarity_parameter_alpha=sample(x=results_subset$mean_similarity_parameter_alpha,size=1), 
                       similarity_parameter_beta=sample(x=results_subset$mean_similarity_parameter_beta,size=1)),
      iterations=3000, return_posterior=FALSE)
    
    
    
    # mixture BLRM with estimated weight and Beta(0.5,0.5) Prior
    # mixture_estimated <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
    #                                 estimate_similarity_parameter=TRUE,
    #                                 sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
    #                                 stanmodel=BLRM_mixture_estimate,  
    #                                 stan_data = list("dR"=dR, "K"=length(doses),
    #                                                  "mu_1" = informative_mu[[sim]], "mu_2" = informative_mu[[sim]], 
    #                                                  "Sigma_1" = informative_Sigma[[sim]], "Sigma_2" = Sigma, "delta_a"=0.5, "delta_b"=0.5),
    #                                 iterations=3000, return_posterior=FALSE)
    
    
    # inflated variance BLRM with estimated weight and Beta(0.5,0.5) Prior
    # inflated_estimated <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(), 
    #                                  estimate_similarity_parameter=TRUE,
    #                                  sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
    #                                  stanmodel=BLRM_inflated_estimated,  
    #                                  stan_data = list("dR"=dR, "K"=length(doses),
    #                                                   "mu" = informative_mu[[sim]], 
    #                                                   "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])), 
    #                                                   "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])), 
    #                                                   "delta_a"=0.5, "delta_b"=0.5),
    #                                  iterations=3000, return_posterior=FALSE)
    
    # return(bind_rows(fixed_weak %>% add_column("specification"="fixed_weak"), 
    #                  fixed_strong %>% add_column("specification"="fixed_strong"), 
    #                  mixture_0.5 %>% add_column("specification"="mixture_0.5"), 
    #                  mixture_estimated %>% add_column("specification"="mixture_estimated"), 
    #                  mixture_metaModel_N30_3comp %>% add_column("specification"="mixture_metaModel_N30_3comp"), 
    #                  mixture_metaModel_N100_20comp %>% add_column("specification"="mixture_metaModel_N100_20comp"), 
    #                  mixture_ExNexModel_N30_3comp %>% add_column("specification"="mixture_ExNexModel_N30_3comp"), 
    #                  mixture_ExNexModel_N100_20comp %>% add_column("specification"="mixture_ExNexModel_N100_20comp"), 
    #                  inflated_0.5 %>% add_column("specification"="inflated_0.5"), 
    #                  inflated_estimated %>% add_column("specification"="inflated_estimated"), 
    #                  inflated_metaModel_N30_3comp %>% add_column("specification"="inflated_metaModel_N30_3comp"), 
    #                  inflated_metaModel_N100_20comp %>% add_column("specification"="inflated_metaModel_N100_20comp"), 
    #                  inflated_ExNexModel_N30_3comp %>% add_column("specification"="inflated_ExNexModel_N30_3comp"), 
    #                  inflated_ExNexModel_N100_20comp %>% add_column("specification"="inflated_ExNexModel_N100_20comp")) %>% add_column("simID"=sim))
    
    return(bind_rows(fixed_weak %>% add_column("specification"="fixed_weak"), 
                     fixed_strong %>% add_column("specification"="fixed_strong"), 
                     mixture_0.5 %>% add_column("specification"="mixture_0.5"), 
                     inflated_0.5 %>% add_column("specification"="inflated_0.5"), 
                     #mixture_estimated %>% add_column("specification"="mixture_estimated"), 
                     mixture_metaModel_N100_20comp %>% add_column("specification"="mixture_metaModel_N100_20comp"), 
                     mixture_ExNexModel_N100_20comp %>% add_column("specification"="mixture_ExNexModel_N100_20comp"), 
                     inflated_metaModel_N100_20comp %>% add_column("specification"="inflated_metaModel_N100_20comp"), 
                     inflated_ExNexModel_N100_20comp %>% add_column("specification"="inflated_ExNexModel_N100_20comp"),
                     mixture_metaModel_N30_7comp %>% add_column("specification"="mixture_metaModel_N30_7comp"), 
                     mixture_ExNexModel_N30_7comp %>% add_column("specification"="mixture_ExNexModel_N30_7comp"), 
                     inflated_metaModel_N30_7comp %>% add_column("specification"="inflated_metaModel_N30_7comp"), 
                     inflated_ExNexModel_N30_7comp %>% add_column("specification"="inflated_ExNexModel_N30_7comp")) %>% 
             add_column("simID"=sim))
  }
  stopCluster(cl) # end parallel computing
  
  Sys.time() - start.time
  print(i)
  saveRDS(sim_results, file="sim_results.Rds")
}

```



Repeat analysis for inflated default due to a typo in original simulation
```{r}

sim_results_infl_default_posthoc <- list()

for(i in 1:10){
  ncores <- detectCores()-1; 
  cl <- makeCluster(ncores); registerDoParallel(cl);
  
  start.time <- Sys.time()
  
  sim_results_infl_default_posthoc[[i]] <- foreach(sim = ((i-1)*nrow(dose_tox_scenarios)/10+1): (i*nrow(dose_tox_scenarios)/10), .combine=rbind, .packages=c("tidyverse", "rstan", "R2jags", "MASS")) %dopar% {
    
    # inflated variance BLRM with fixed weight of 0.5
    inflated_0.5 <- sim.phaseI(doses=doses, target.tox=0.3, true.tox=dose_tox_scenarios[sim,] %>% dplyr::select(starts_with("ped_tox")) %>% unlist() %>% as.numeric(),
                               estimate_similarity_parameter=FALSE,
                               sample.size=12, cohort.size=2, stopping.rule="mean", escalation.rule="mean",
                               stanmodel=BLRM_inflated_fixed,
                               stan_data = list("dR"=dR, "K"=length(doses),
                                                "mu" = informative_mu[[sim]],
                                                "sigma" = c(sqrt(informative_Sigma[[sim]][1,1]), sqrt(informative_Sigma[[sim]][2,2])),
                                                "rho" = informative_Sigma[[sim]][2,1] / (sqrt(informative_Sigma[[sim]][1,1]) * sqrt(informative_Sigma[[sim]][2,2])),
                                                "similarity_parameter_alpha"=0.5, "similarity_parameter_beta"=0.5),
                               iterations=3000, return_posterior=FALSE)
    
    return(bind_rows(inflated_0.5 %>% add_column("specification"="inflated_0.5")) %>% 
             add_column("simID"=sim))
  }
  stopCluster(cl) # end parallel computing
  
  print(i)
  print(Sys.time() - start.time)
  saveRDS(sim_results_infl_default_posthoc, file="sim_results_infl_default_posthoc.Rds")
}

sim_results_infl_default_posthoc <- bind_rows(sim_results_infl_default_posthoc)

sim_results <- bind_rows(
  sim_results %>% filter(specification != "inflated_0.5"),
  sim_results_infl_default_posthoc)
  
saveRDS(sim_results, file="sim_results.Rds")

```


```{r}
sim_results <- readRDS("sim_results.Rds")
sim_results <- bind_rows(sim_results)

```

```{r, fig.height=10, fig.width=16}
plot_data <- sim_results %>% pivot_wider(id_cols=c(specification, simID, MTD.dose.level), names_from=dose.level, values_from=c(mean.tox, true.tox, toxicities.per.dose, patients.per.dose)) %>% 
  left_join(., dose_tox_scenarios %>% dplyr::select(alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario) %>% rownames_to_column("simID") %>% mutate(simID=as.numeric(simID))) %>%
  dplyr::select(-c(starts_with("true"), starts_with("mean"), starts_with("toxicities.per"), starts_with("patients.per"))) %>% 
  mutate(true.MTD = case_when(alpha_ped==-2.5 & beta_ped==0 ~ 5,
                              alpha_ped==-0.84 & beta_ped==0 ~ 3,
                              alpha_ped==-2.5 & beta_ped==1.5 ~ 4,
                              alpha_ped==-0.84 & beta_ped==1.5 ~ 3),
         parameters_adults = paste0("alpha = ", as.character(alpha_adults), ", beta = ", as.character(beta_adults)),
         parameters_ped = paste0("alpha = ", as.character(alpha_ped), ", beta = ", as.character(beta_ped))) %>%
  rowwise() %>% mutate(correct = MTD.dose.level==true.MTD) 

plot_data <- plot_data %>% 
  mutate(specification = factor(specification,
                                levels = c("fixed_weak", "fixed_strong", "mixture_0.5", "inflated_0.5", "mixture_metaModel_N100_20comp",
                                           "mixture_ExNexModel_N100_20comp", "mixture_metaModel_N30_7comp", "mixture_ExNexModel_N30_7comp",
                                           "inflated_metaModel_N100_20comp", "inflated_ExNexModel_N100_20comp",
                                           "inflated_metaModel_N30_7comp", "inflated_ExNexModel_N30_7comp"),
                                labels = c("weak prior", "full borrowing", "default mixture", "default inflated", "MetaModel mixture\n(20 comp)",
                                           "ExNex mixture\n(20 comp)", "MetaModel mixture\n(7 comp)", "ExNex mixture\n(7 comp)",
                                           "MetaModel inflated\n(20 comp)", "ExNex inflated\n(20 comp)",
                                           "MetaModel inflated\n(7 comp)", "ExNex inflated\n(7 comp)"))) 
plot_data <- plot_data %>% 
  mutate(model_type = ifelse(grepl(pattern = "fixed", x = specification) , "fixed",
                              ifelse(grepl(pattern = "mixture", x = specification), "mixture",
                                     ifelse(grepl(pattern = "inflated", x = specification), "inflated", "NA"))))

facet_labels <- expand.grid(`alpha adults` = c(-2.5, -0.84), `beta adults` = c(0, 1.5), `alpha ped` = c(-2.5, -0.84), `beta ped` = c(0, 1.5)) %>% 
  as_tibble() %>% 
  add_column("facet_label" = c(1, 3, 2, 4, 9, 11, 10, 12, 5, 7, 6, 8, 13, 15, 14, 16))  # the order is a bit random

plot_data %>% 
  #filter(!grepl(pattern = "inflated", x = specification)) %>% 
  group_by(specification, alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario, "correct"=as.factor(correct), model_type, .drop=FALSE) %>% 
  summarise(n=n()) %>% filter(correct==TRUE) %>% 
  rename("alpha adults"=alpha_adults, "beta adults"=beta_adults, "alpha ped"=alpha_ped, "beta ped"=beta_ped) %>% 
  ggplot(.) + geom_point(aes(x = specification, y = n, color = model_type)) +
  xlab("") + ylab("Number simulated trials\nwith correct MTD") +
  facet_grid(`alpha ped`+`beta ped` ~ `alpha adults`+`beta adults`, labeller = label_both) + 
  theme_bw() + theme(axis.text.x=element_text(angle=90, size=10), legend.position="none") +
  geom_text(data = facet_labels, mapping = aes(x = 0.7, y = nsim*0.98, label = facet_label), size = 4)
```


```{r}
# just some data inspection

# plot_data %>% 
#   group_by(specification, alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario, MTD.dose.level, true.MTD, model_type, .drop=FALSE) %>% 
#   summarise(n=n()) %>% 
#   filter(alpha_adults==-0.84 & beta_adults==1.5 & alpha_ped==-2.5 & beta_ped==0) %>% View()
# 
# results %>% filter(grepl(pattern="similarity", x=param) & model %in% c("jags", "stan_ExNexModel") & similarity_scenario=="alpha.diff_beta.diff") %>% 
#   dplyr::select(-c(`2.5%`, `50%`, `97.5%`)) %>% 
#   pivot_wider(names_from=param, values_from=c(mean)) %>% unnest() %>% 
#   dplyr::select(model, starts_with("similarity"), starts_with("sample"), nr_compounds) %>% 
#   filter((nr_compounds==7 & sample_size_adults_ped=="30.30") | (nr_compounds==20 & sample_size_adults_ped=="100.100")) %>% 
#   ggplot(.) + geom_point(aes(x=as.factor(nr_compounds), y=similarity_parameter_beta)) + facet_grid(~model)

```


```{r, fig.height=10, fig.width=16}
sim_results_wide_format <- sim_results %>% 
  pivot_wider(id_cols=c(specification, simID, MTD.dose.level), names_from=dose.level, values_from=c(mean.tox, true.tox, toxicities.per.dose, patients.per.dose)) %>% 
  left_join(., dose_tox_scenarios %>% dplyr::select(alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario) %>% 
              rownames_to_column("simID") %>% mutate(simID=as.numeric(simID))) %>% 
  mutate(true.MTD = case_when(alpha_ped==-2.5 & beta_ped==0 ~ 5,
                              alpha_ped==-0.84 & beta_ped==0 ~ 3,
                              alpha_ped==-2.5 & beta_ped==1.5 ~ 4,
                              alpha_ped==-0.84 & beta_ped==1.5 ~ 3),
         parameters_adults = paste0("alpha = ", as.character(alpha_adults), ", beta = ", as.character(beta_adults)),
         parameters_ped = paste0("alpha = ", as.character(alpha_ped), ", beta = ", as.character(beta_ped))) %>%
  rowwise() %>% mutate(correct = MTD.dose.level==true.MTD)

dat_plot <- sim_results %>% 
  pivot_wider(id_cols=c(specification, simID, MTD.dose.level), names_from=dose.level, values_from=c(mean.tox, true.tox, toxicities.per.dose, patients.per.dose)) %>% 
  left_join(., dose_tox_scenarios %>% dplyr::select(alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario) %>% 
              rownames_to_column("simID") %>% mutate(simID=as.numeric(simID))) %>% 
  mutate(true.MTD = case_when(alpha_ped==-2.5 & beta_ped==0 ~ 5,
                              alpha_ped==-0.84 & beta_ped==0 ~ 3,
                              alpha_ped==-2.5 & beta_ped==1.5 ~ 4,
                              alpha_ped==-0.84 & beta_ped==1.5 ~ 3),
         parameters_adults = paste0("alpha = ", as.character(alpha_adults), ", beta = ", as.character(beta_adults)),
         parameters_ped = paste0("alpha = ", as.character(alpha_ped), ", beta = ", as.character(beta_ped))) %>%
  rowwise() %>% mutate(correct = MTD.dose.level==true.MTD) %>% 
  mutate(specification = factor(specification)) %>% 
  group_by(specification, alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario, "correct"=as.factor(correct), .drop=FALSE) %>% 
  summarise(n=n()) %>% filter(correct==TRUE) %>% #filter(specification != "inflated_0.5") %>% 
  mutate(specification = factor(specification, 
                                levels = c("fixed_weak", "fixed_strong", "mixture_0.5", "inflated_0.5", 
                                           "mixture_metaModel_N100_20comp", "mixture_ExNexModel_N100_20comp",
                                           "inflated_metaModel_N100_20comp", "inflated_ExNexModel_N100_20comp",
                                           "mixture_metaModel_N30_7comp", "mixture_ExNexModel_N30_7comp",
                                           "inflated_metaModel_N30_7comp", "inflated_ExNexModel_N30_7comp"))) %>% 
  mutate(specification_group = case_when(specification=="fixed_weak" ~ "fixed borrowing",
                                         specification=="fixed_strong" ~ "fixed borrowing",
                                         specification=="mixture_0.5" ~ "mixture prior",
                                         specification=="mixture_metaModel_N100_20comp" ~ "mixture prior",
                                         specification=="mixture_ExNexModel_N100_20comp" ~ "mixture prior",
                                         specification=="mixture_metaModel_N30_7comp" ~ "mixture prior",
                                         specification=="mixture_ExNexModel_N30_7comp" ~ "mixture prior",
                                         specification=="inflated_0.5" ~ "inflated prior",
                                         specification=="inflated_metaModel_N100_20comp" ~ "inflated prior",
                                         specification=="inflated_ExNexModel_N100_20comp" ~ "inflated prior",
                                         specification=="inflated_metaModel_N30_7comp" ~ "inflated prior",
                                         specification=="inflated_ExNexModel_N30_7comp" ~ "inflated prior")) %>%
  rename("alpha adults"=alpha_adults, "beta adults"=beta_adults, "alpha ped"=alpha_ped, "beta ped"=beta_ped)

tox_for_plot <- expand.grid(`alpha adults` = c(-0.84,-2.5), `beta adults` = c(0,1.5), `alpha ped` = c(-0.84,-2.5), `beta ped` = c(0,1.5), dose=0:20) %>% 
  rowwise() %>% 
  mutate(tox_adults=dose_tox_fun(doses=dose, dR=10, logalpha=`alpha adults`, logbeta=`beta adults`),
         tox_ped=dose_tox_fun(doses=dose, dR=10, logalpha=`alpha ped`, logbeta=`beta ped`)) %>% 
  pivot_longer(cols=c(tox_adults, tox_ped), names_to="population", names_prefix="tox_", values_to="tox")

# sim_results_wide_format %>% filter(alpha_adults==-0.84, alpha_ped==-0.84, beta_adults==0, beta_ped==1.5) %>%
#   group_by(specification, MTD.dose.level) %>% summarise(n())
```


```{r, fig.height=9, fig.width=18}
facet_labels <- expand.grid(`alpha adults` = c(-2.5, -0.84), `beta adults` = c(0, 1.5), `alpha ped` = c(-2.5, -0.84), `beta ped` = c(0, 1.5)) %>% 
  as_tibble() %>% 
  add_column("facet_label" = c(1, 3, 2, 4, 9, 11, 10, 12, 5, 7, 6, 8, 13, 15, 14, 16))  # the order is a bit random

dat_plot %>% 
  mutate(specification = as.numeric(specification)-1,
         specification_group = as.factor(specification_group)) %>%
  rowwise() %>% 
  mutate(n_min = binom.test(x = n, n = 1000)$conf.int[1],
         n_max = binom.test(x = n, n = 1000)$conf.int[2]) %>% 
  ggplot(.) + 
  geom_point(aes(x=specification, y=n/1000, fill=specification_group), shape = 21, size = 2.1) + 
  #geom_errorbar(aes(x = specification, ymin = n_min, ymax = n_max), width = 0.3) +
  geom_line(data = tox_for_plot, aes(x=dose/2, y=tox, colour=population)) +
  scale_color_viridis_d(begin = 0.1, end = 0.6, option = "rocket") + scale_fill_viridis_d("type of prior") +
  xlab("") + ylab("Number simulated trials\nwith correct MTD") +
  facet_grid(`alpha ped`+`beta ped` ~ `alpha adults`+`beta adults`, labeller = label_both) + 
  scale_x_continuous(breaks=(1:length(unique(dat_plot$specification))-1), 
                     labels=c("weak prior", "full borrowing", "mixt equal weights", "infl default",
                              "mixt hierarch 20cmp", "mixt ExNex 20cmp", "infl hierarch 20cmp", "infl ExNex 20cmp",
                              "mixt hierarch 7cmp", "mixt ExNex 7cmp", "infl hierarch 7cmp", "infl ExNex 7cmp"), 
                     sec.axis = sec_axis(trans=~.x*2, name="Dose")) + 
  scale_y_continuous("Accuracy", sec.axis=sec_axis(~., name="Probability of toxicity")) + 
  theme_bw() + 
  theme(axis.text.x.bottom=element_text(size=10, angle=90, vjust=0.5), 
        legend.position="left", panel.spacing.x = unit(1.5, "lines"))   +
  geom_text(data = facet_labels, mapping = aes(x = -0.3, y = 0.1, label = facet_label), size = 4)

ggsave("accuracy.eps", device="eps", width=14, height=7)

```



# Overdosing and underdosing

```{r, fig.height=9, fig.width=18}

compare_MTD <- function(MTD, true.MTD) {
  if (MTD > true.MTD) {
    return("overdosing")
  } else if (MTD < true.MTD) {
    return("underdosing")
  } else {
    return("correct")
  }
}

sim_results %>% 
  pivot_wider(id_cols=c(specification, simID, MTD.dose.level), names_from=dose.level, values_from=c(mean.tox, true.tox, toxicities.per.dose, patients.per.dose)) %>% 
  left_join(., dose_tox_scenarios %>% dplyr::select(alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario) %>% 
              rownames_to_column("simID") %>% mutate(simID=as.numeric(simID))) %>% 
  mutate(true.MTD = case_when(alpha_ped==-2.5 & beta_ped==0 ~ 5,
                              alpha_ped==-0.84 & beta_ped==0 ~ 3,
                              alpha_ped==-2.5 & beta_ped==1.5 ~ 4,
                              alpha_ped==-0.84 & beta_ped==1.5 ~ 3),
         parameters_adults = paste0("alpha = ", as.character(alpha_adults), ", beta = ", as.character(beta_adults)),
         parameters_ped = paste0("alpha = ", as.character(alpha_ped), ", beta = ", as.character(beta_ped))) %>% 
  rowwise() %>% mutate(identified.MTD = compare_MTD(MTD.dose.level, true.MTD)) %>%
  group_by(specification, alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario, "correct"=as.factor(identified.MTD), .drop=FALSE) %>% 
  summarise(n=n()) %>% 
  mutate(specification = factor(specification, 
                                levels = c("fixed_weak", "fixed_strong", "mixture_0.5", 
                                           "mixture_metaModel_N100_20comp", "mixture_ExNexModel_N100_20comp",
                                           "inflated_metaModel_N100_20comp", "inflated_ExNexModel_N100_20comp",
                                           "mixture_metaModel_N30_7comp", "mixture_ExNexModel_N30_7comp",
                                           "inflated_metaModel_N30_7comp", "inflated_ExNexModel_N30_7comp"))) %>% 
  mutate(specification_group = case_when(specification=="fixed_weak" ~ "fixed borrowing",
                                         specification=="fixed_strong" ~ "fixed borrowing",
                                         specification=="mixture_0.5" ~ "mixture prior",
                                         specification=="mixture_metaModel_N100_20comp" ~ "mixture prior",
                                         specification=="mixture_ExNexModel_N100_20comp" ~ "mixture prior",
                                         specification=="mixture_metaModel_N30_7comp" ~ "mixture prior",
                                         specification=="mixture_ExNexModel_N30_7comp" ~ "mixture prior",
                                         #specification=="inflated_0.5" ~ "inflation parameter \ndefault 0.5",
                                         specification=="inflated_metaModel_N100_20comp" ~ "inflated prior",
                                         specification=="inflated_ExNexModel_N100_20comp" ~ "inflated prior",
                                         specification=="inflated_metaModel_N30_7comp" ~ "inflated prior",
                                         specification=="inflated_ExNexModel_N30_7comp" ~ "inflated prior")) %>%
  rename("alpha adults"=alpha_adults, "beta adults"=beta_adults, "alpha ped"=alpha_ped, "beta ped"=beta_ped) %>% 
  ggplot(.) + 
  geom_col(aes(x=specification, y=n, fill=correct)) + 
  xlab("") + ylab("Number simulated trials\nwith correct MTD") +
  facet_grid(`alpha ped`+`beta ped` ~ `alpha adults`+`beta adults`, labeller = label_both) + 
  scale_x_discrete(labels=c("weak prior", "full borrowing", "mixt equal weights",
                              "mixt Meta 20cmp", "mixt ExNex 20cmp", "infl Meta 20cmp", "infl ExNex 20cmp",
                              "mixt Meta 7cmp", "mixt ExNex 7cmp", "infl Meta 7cmp", "infl ExNex 7cmp")
                   ) +
  theme_bw() + 
  theme(axis.text.x.bottom=element_text(size=10, angle=90, vjust=0.5), 
        legend.position="left", panel.spacing.x = unit(1.5, "lines"))   +
  geom_text(data = facet_labels, mapping = aes(x = 1, y = 1000, label = facet_label), size = 5)
  

```



```{r, fig.height=10, fig.width=16}
# red rectengular boxes to guide focus on specific scenarios
# p1 + geom_rect(data = tibble(`alpha adults`=-2.5, `beta adults`=1.5, `alpha ped`=-2.5, `beta ped`=1.5), 
#             fill=NA, colour = "red", xmin = -0.1, xmax = 4.1, ymin = 0, ymax = 1.03, size=1)
# ggsave("accuracyS1.eps", device="eps", width=11, height=7)
# 
# p1 + geom_rect(data = tibble(`alpha adults`=-0.84, `beta adults`=1.5, `alpha ped`=-2.5, `beta ped`=1.5), 
#             fill=NA, colour = "red", xmin = -0.1, xmax = 4.1, ymin = 0, ymax = 1.03, size=1)
# ggsave("accuracyS2.eps", device="eps", width=11, height=7)
# 
# p1 + geom_rect(data = tibble(`alpha adults`=-0.84, `beta adults`=0, `alpha ped`=-0.84, `beta ped`=1.5), 
#             fill=NA, colour = "red", xmin = -0.1, xmax = 4.1, ymin = 0, ymax = 1.03, size=1)
# ggsave("accuracyS3.eps", device="eps", width=11, height=7)
# 
# p1 + geom_rect(data = tibble(`alpha adults`=-0.84, `beta adults`=1.5, `alpha ped`=-0.84, `beta ped`=0), 
#             fill=NA, colour = "red", xmin = -0.1, xmax = 4.1, ymin = 0, ymax = 1.03, size=1)
# ggsave("accuracyS4.eps", device="eps", width=11, height=7)

```


```{r, fig.width=4, fig.height=4}
# case of perfect similiary, where strong prior is much better than weak prior, and the estimated similarity parameters perform similarly to strongly informative and better than non-informed borrowing.
sim_results %>% pivot_wider(id_cols=c(specification, simID, MTD.dose.level), names_from=dose.level, values_from=c(mean.tox, true.tox, toxicities.per.dose, patients.per.dose)) %>% 
  left_join(., dose_tox_scenarios %>% dplyr::select(alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario) %>% rownames_to_column("simID") %>% mutate(simID=as.numeric(simID))) %>% 
  mutate(true.MTD = case_when(alpha_ped==-2.5 & beta_ped==0 ~ 5,
                              alpha_ped==-0.84 & beta_ped==0 ~ 3,
                              alpha_ped==-2.5 & beta_ped==1.5 ~ 4,
                              alpha_ped==-0.84 & beta_ped==1.5 ~ 3),
         parameters_adults = paste0("alpha = ", as.character(alpha_adults), ", beta = ", as.character(beta_adults)),
         parameters_ped = paste0("alpha = ", as.character(alpha_ped), ", beta = ", as.character(beta_ped))) %>%
  rowwise() %>% mutate(correct = MTD.dose.level==true.MTD) %>% 
  filter(specification %in% c("fixed_weak", "fixed_strong", "mixture_0.5", "mixture_metaModel_N100_20comp", "mixture_ExNexModel_N100_20comp")) %>% 
  mutate(specification = case_when(specification=="fixed_weak" ~ "fixed design with\nweak prior",
                                   specification=="fixed_strong" ~ "fixed design with\nstrong prior",
                                   specification=="mixture_0.5" ~ "mixture prior with\nequal weights",
                                   specification=="mixture_metaModel_N100_20comp" ~ "mixture prior with\nweights from MetaModel",
                                   specification=="mixture_ExNexModel_N100_20comp" ~ "mixture prior with\nweights from ExNexModel")) %>%
  mutate(specification = factor(specification, levels=c("fixed design with\nweak prior", "fixed design with\nstrong prior", "mixture prior with\nequal weights",
                                                        "mixture prior with\nweights from MetaModel", "mixture prior with\nweights from ExNexModel"))) %>% 
  group_by(specification, alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario, "correct"=as.factor(correct), .drop=FALSE) %>% summarise(n=n()) %>% filter(correct==TRUE) %>% 
  rename("alpha adults"=alpha_adults, "beta adults"=beta_adults, "alpha ped"=alpha_ped, "beta ped"=beta_ped) %>% 
  filter(`alpha adults`==-0.84 & `beta adults`==1.5 & `alpha ped`==-0.84 & `beta ped`==1.5) %>% 
  ggplot(.) + geom_point(aes(x=specification, y=n)) +
  xlab("") + ylab("Number simulated trials\nwith correct MTD") + scale_y_continuous(limits=c(0,100)) +
  facet_grid(`alpha ped`+`beta ped` ~ `alpha adults`+`beta adults`, labeller = label_both) + theme_bw() + theme(axis.text.x=element_text(angle=90, size=10), legend.position="none")

ggsave("accuracy_selected_perfect_similarity.eps", device="eps", width=4, height=4)

```

```{r, fig.width=4, fig.height=4}
# case of no similiary, where strong prior is much worse than weak prior, and the estimated similarity parameters perform similarly to weakly informative and better than non-informed borrowing.
sim_results %>% pivot_wider(id_cols=c(specification, simID, MTD.dose.level), names_from=dose.level, values_from=c(mean.tox, true.tox, toxicities.per.dose, patients.per.dose)) %>% 
  left_join(., dose_tox_scenarios %>% dplyr::select(alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario) %>% rownames_to_column("simID") %>% mutate(simID=as.numeric(simID))) %>% 
  mutate(true.MTD = case_when(alpha_ped==-2.5 & beta_ped==0 ~ 5,
                              alpha_ped==-0.84 & beta_ped==0 ~ 3,
                              alpha_ped==-2.5 & beta_ped==1.5 ~ 4,
                              alpha_ped==-0.84 & beta_ped==1.5 ~ 3),
         parameters_adults = paste0("alpha = ", as.character(alpha_adults), ", beta = ", as.character(beta_adults)),
         parameters_ped = paste0("alpha = ", as.character(alpha_ped), ", beta = ", as.character(beta_ped))) %>%
  rowwise() %>% mutate(correct = MTD.dose.level==true.MTD) %>% 
  filter(specification %in% c("fixed_weak", "fixed_strong", "mixture_0.5", "mixture_metaModel_N100_20comp", "mixture_ExNexModel_N100_20comp")) %>% 
  mutate(specification = case_when(specification=="fixed_weak" ~ "fixed design with\nweak prior",
                                   specification=="fixed_strong" ~ "fixed design with\nstrong prior",
                                   specification=="mixture_0.5" ~ "mixture prior with\nequal weights",
                                   specification=="mixture_metaModel_N100_20comp" ~ "mixture prior with\nweights from MetaModel",
                                   specification=="mixture_ExNexModel_N100_20comp" ~ "mixture prior with\nweights from ExNexModel")) %>%
  mutate(specification = factor(specification, levels=c("fixed design with\nweak prior", "fixed design with\nstrong prior", "mixture prior with\nequal weights",
                                                        "mixture prior with\nweights from MetaModel", "mixture prior with\nweights from ExNexModel"))) %>% 
  group_by(specification, alpha_adults, beta_adults, alpha_ped, beta_ped, similarity_scenario, "correct"=as.factor(correct), .drop=FALSE) %>% summarise(n=n()) %>% filter(correct==TRUE) %>% 
  rename("alpha adults"=alpha_adults, "beta adults"=beta_adults, "alpha ped"=alpha_ped, "beta ped"=beta_ped) %>% 
  filter(`alpha adults`==-0.84 & `beta adults`==0 & `alpha ped`==-2.5 & `beta ped`==0) %>% 
  ggplot(.) + geom_point(aes(x=specification, y=n)) +
  xlab("") + ylab("Number simulated trials\nwith correct MTD") +scale_y_continuous(limits=c(0,100)) +
  facet_grid(`alpha ped`+`beta ped` ~ `alpha adults`+`beta adults`, labeller = label_both) + theme_bw() + theme(axis.text.x=element_text(angle=90, size=10), legend.position="none")

ggsave("accuracy_selected_no_similarity.eps", device="eps", width=4, height=4)

```

